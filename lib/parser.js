/* jshint ignore:start */

/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var smarty = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"stmts":4,"EOF":5,"program":6,"program_repetition0":7,"program_option0":8,"stmt":9,"CONTENT":10,"openBlock":11,"closeBlock":12,"OPEN":13,"CMD":14,"openBlock_repetition0":15,"CLOSE":16,"OPEN_BLOCK_END":17,"elseif":18,"ELSEIF":19,"elseif_repetition0":20,"elseif_option0":21,"else":22,"ELSE":23,"else_option0":24,"param":25,"STRING":26,"INTEGER":27,"BOOLEAN":28,"dataName":29,"OPERATOR":30,"DATA":31,"path":32,"pathSegments":33,"SEP":34,"ID":35,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"CONTENT",13:"OPEN",14:"CMD",16:"CLOSE",17:"OPEN_BLOCK_END",19:"ELSEIF",23:"ELSE",26:"STRING",27:"INTEGER",28:"BOOLEAN",30:"OPERATOR",31:"DATA",34:"SEP",35:"ID"},
productions_: [0,[3,2],[3,1],[6,3],[4,1],[4,2],[9,1],[9,3],[11,4],[12,3],[18,4],[22,3],[25,1],[25,1],[25,1],[25,1],[25,1],[29,2],[32,1],[33,3],[33,1],[7,0],[7,2],[8,0],[8,1],[15,0],[15,2],[20,0],[20,2],[21,0],[21,1],[24,0],[24,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return new yy.ProgramNode($$[$0-1]); 
break;
case 2: return new yy.ProgramNode([]); 
break;
case 3:
    this.$ = new yy.ProgramNode(
      $$[$0-2], 
      $$[$0-1].length ? yy.buildBlockInverse($$[$0-1], $$[$0]) : ($$[$0] || [])
    );
  
break;
case 4:this.$ = [$$[$0]];
break;
case 5: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 6:this.$ = new yy.TextNode($$[$0]);
break;
case 7:this.$ = new yy.BlockNode($$[$0-2], $$[$0], $$[$0-1], $$[$0-1].inverse);
break;
case 8:this.$ = new yy.CommandNode($$[$0-2], $$[$0-1]);
break;
case 9:this.$ = $$[$0-1];
break;
case 10:this.$ = {command:'elseif', params: $$[$0-2], statements: $$[$0]};
break;
case 11:this.$ = $$[$0];
break;
case 12:this.$ = new yy.TextNode($$[$0]);
break;
case 13:this.$ = new yy.TextNode($$[$0]);
break;
case 14:this.$ = new yy.TextNode($$[$0]);
break;
case 15:this.$ = $$[$0];
break;
case 16:this.$ = new yy.TextNode($$[$0]);
break;
case 17:this.$ = new yy.IdNode($$[$0]);
break;
case 18:this.$ = $$[$0];
break;
case 19:this.$ = $$[$0-2].concat($$[$0]);
break;
case 20:this.$ = [$$[$0]];
break;
case 21:this.$ = [];
break;
case 22:$$[$0-1].push($$[$0]);
break;
case 25:this.$ = [];
break;
case 26:$$[$0-1].push($$[$0]);
break;
case 27:this.$ = [];
break;
case 28:$$[$0-1].push($$[$0]);
break;
}
},
table: [{3:1,4:2,5:[1,3],9:4,10:[1,5],11:6,13:[1,7]},{1:[3]},{5:[1,8],9:9,10:[1,5],11:6,13:[1,7]},{1:[2,2]},{5:[2,4],10:[2,4],13:[2,4],17:[2,4],19:[2,4],23:[2,4]},{5:[2,6],10:[2,6],13:[2,6],17:[2,6],19:[2,6],23:[2,6]},{4:11,6:10,9:4,10:[1,5],11:6,13:[1,7]},{14:[1,12]},{1:[2,1]},{5:[2,5],10:[2,5],13:[2,5],17:[2,5],19:[2,5],23:[2,5]},{12:13,17:[1,14]},{7:15,9:9,10:[1,5],11:6,13:[1,7],17:[2,21],19:[2,21],23:[2,21]},{15:16,16:[2,25],26:[2,25],27:[2,25],28:[2,25],30:[2,25],31:[2,25]},{5:[2,7],10:[2,7],13:[2,7],17:[2,7],19:[2,7],23:[2,7]},{14:[1,17]},{8:18,17:[2,23],18:19,19:[1,21],22:20,23:[1,22]},{16:[1,23],25:24,26:[1,25],27:[1,26],28:[1,27],29:28,30:[1,29],31:[1,30]},{16:[1,31]},{17:[2,3]},{17:[2,22],19:[2,22],23:[2,22]},{17:[2,24]},{16:[2,27],20:32,26:[2,27],27:[2,27],28:[2,27],30:[2,27],31:[2,27]},{16:[1,33]},{10:[2,8],13:[2,8]},{16:[2,26],26:[2,26],27:[2,26],28:[2,26],30:[2,26],31:[2,26]},{16:[2,12],26:[2,12],27:[2,12],28:[2,12],30:[2,12],31:[2,12]},{16:[2,13],26:[2,13],27:[2,13],28:[2,13],30:[2,13],31:[2,13]},{16:[2,14],26:[2,14],27:[2,14],28:[2,14],30:[2,14],31:[2,14]},{16:[2,15],26:[2,15],27:[2,15],28:[2,15],30:[2,15],31:[2,15]},{16:[2,16],26:[2,16],27:[2,16],28:[2,16],30:[2,16],31:[2,16]},{32:34,33:35,35:[1,36]},{5:[2,9],10:[2,9],13:[2,9],17:[2,9],19:[2,9],23:[2,9]},{16:[1,37],25:38,26:[1,25],27:[1,26],28:[1,27],29:28,30:[1,29],31:[1,30]},{4:40,9:4,10:[1,5],11:6,13:[1,7],17:[2,31],24:39},{16:[2,17],26:[2,17],27:[2,17],28:[2,17],30:[2,17],31:[2,17]},{16:[2,18],26:[2,18],27:[2,18],28:[2,18],30:[2,18],31:[2,18],34:[1,41]},{16:[2,20],26:[2,20],27:[2,20],28:[2,20],30:[2,20],31:[2,20],34:[2,20]},{4:43,9:4,10:[1,5],11:6,13:[1,7],17:[2,29],19:[2,29],21:42,23:[2,29]},{16:[2,28],26:[2,28],27:[2,28],28:[2,28],30:[2,28],31:[2,28]},{17:[2,11]},{9:9,10:[1,5],11:6,13:[1,7],17:[2,32]},{35:[1,44]},{17:[2,10],19:[2,10],23:[2,10]},{9:9,10:[1,5],11:6,13:[1,7],17:[2,30],19:[2,30],23:[2,30]},{16:[2,19],26:[2,19],27:[2,19],28:[2,19],30:[2,19],31:[2,19],34:[2,19]}],
defaultActions: {3:[2,2],8:[2,1],18:[2,3],20:[2,24],39:[2,11]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
  this.begin("s");
  if (yy_.yytext) {
    console.log("CONTENT:%s", yy_.yytext);
    return "CONTENT";
  }

break;
case 1:
  console.log("CONTENT:%s", yy_.yytext);
  return "CONTENT";

break;
case 2:
  console.log("CMD|%s", yy_.yytext);
  this.begin("cmd");
  return "CMD";

break;
case 3:
  return "OPERATOR";

break;
case 4:
  return "ID";

break;
case 5:
  console.log("CMD|STRING|%s", yy_.yytext);
  return "STRING";

break;
case 6:
  console.log("CMD|STRING|%s", yy_.yytext);
  return "STRING";

break;
case 7:
  return "BOOLEAN";

break;
case 8:
  console.log("IN_CMD|$");
  return "DATA";

break;
case 9:
  console.log("IN_CMD|.");
  return "SEP";

break;
case 10:
  return "CURSOR";

break;
case 11:
  return "INTEGER";

break;
case 12:
  // eat

break;
case 13:
  this.popState();
  this.popState();
  return "CLOSE";

break;
case 14:
  console.log('CLOSE_CMD|%s\n',yy_.yytext);
  yy_.yytext = yy_.yytext.slice(1);
  return "CLOSE_CMD";

break;
case 15:
  console.log("ELSEIF"); 
  yy_.yytext = "elseif";
  this.begin("cmd");
  return "ELSEIF";

break;
case 16:
  console.log("ELSE");
  yy_.yytext = "else";
  return "ELSE";

break;
case 17:
  console.log('CLOSE_CMD');
  return "OPEN_BLOCK_END";

break;
case 18:
  console.log("OPEN");
  return "OPEN";

break;
case 19:
  console.log('CLOSE');
  this.popState();
  return "CLOSE";

break;
case 20:
  // eat

break;
case 21:
  return "EOF";

break;
}
},
rules: [/^(?:[^\x00]*?(?=(\{)))/,/^(?:[^\x00]+)/,/^(?:(if|foreach(?=([=}\s\/.]))))/,/^(?:(=>|===|==|=|as(?=([=}\s\/.]))))/,/^(?:([a-zA-Z][a-zA-Z0-9]*(?=([=}\s\/.]))))/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:(false|true(?=([=}\s\/.]))))/,/^(?:\$)/,/^(?:\.)/,/^(?:@)/,/^(?:(-?[0-9]+(?=([=}\s\/.]))))/,/^(?:\s+)/,/^(?:\})/,/^(?:\/(if|foreach(?=([=}\s\/.]))))/,/^(?:(\{)\s*(elseif(?=([=}\s\/.]))))/,/^(?:(\{)\s*(else(?=([=}\s\/.]))))/,/^(?:(\{)\/)/,/^(?:(\{))/,/^(?:(\}))/,/^(?:[\s])/,/^(?:$)/],
conditions: {"s":{"rules":[2,14,15,16,17,18,19,20,21],"inclusive":false},"cmd":{"rules":[3,4,5,6,7,8,9,10,11,12,13],"inclusive":false},"id":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,1,21],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();

module.exports=smarty;
/* jshint ignore:end */