/* jshint ignore:start */

/* parser generated by jison 0.4.13 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"stmts":4,"EOF":5,"program":6,"program_repetition0":7,"program_option0":8,"stmt":9,"CONTENT":10,"openBlock":11,"closeBlock":12,"OPEN":13,"chainable":14,"CLOSE":15,"ID":16,"stmt_repetition0":17,"CMD":18,"openBlock_repetition0":19,"commandParam":20,"param":21,"property":22,"OPEN_BLOCK_END":23,"elseif":24,"ELSEIF":25,"elseif_repetition0":26,"elseif_option0":27,"else":28,"ELSE":29,"else_option0":30,"EQUAL":31,"constant":32,"STRING":33,"INTEGER":34,"BOOLEAN":35,"OPERATOR":36,"variable":37,"chainable_repetition0":38,"function":39,"chainable_repetition1":40,"FUNCTION_OPEN":41,"function_repetition0":42,"FUNCTION_CLOSE":43,"DATA":44,"path":45,"modifier":46,"MODIFIER":47,"modifier_option0":48,"modifier_params":49,"MODIFIER_PARAM":50,"pathSegments":51,"SEP":52,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",10:"CONTENT",13:"OPEN",15:"CLOSE",16:"ID",18:"CMD",23:"OPEN_BLOCK_END",25:"ELSEIF",29:"ELSE",31:"EQUAL",33:"STRING",34:"INTEGER",35:"BOOLEAN",36:"OPERATOR",41:"FUNCTION_OPEN",43:"FUNCTION_CLOSE",44:"DATA",47:"MODIFIER",50:"MODIFIER_PARAM",52:"SEP"},
productions_: [0,[3,2],[3,1],[6,3],[6,0],[4,1],[4,2],[9,1],[9,3],[9,3],[9,4],[11,4],[20,1],[20,1],[12,3],[24,4],[28,2],[22,3],[21,1],[21,1],[32,1],[32,1],[32,1],[32,1],[14,2],[14,2],[39,4],[37,2],[46,3],[49,2],[49,3],[45,1],[51,3],[51,1],[7,0],[7,2],[8,0],[8,1],[17,0],[17,2],[19,0],[19,2],[26,0],[26,2],[27,0],[27,1],[30,0],[30,1],[38,0],[38,2],[40,0],[40,2],[42,0],[42,2],[48,0],[48,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1: return new yy.ProgramNode($$[$0-1]); 
break;
case 2: return new yy.ProgramNode([]); 
break;
case 3:
    this.$ = new yy.ProgramNode(
      $$[$0-2], 
      $$[$0-1].length ? yy.buildBlockInverse($$[$0-1], $$[$0]) : ($$[$0] || [])
    );
  
break;
case 4:this.$ = new yy.ProgramNode([]);;
break;
case 5:this.$ = [$$[$0]];
break;
case 6: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 7:this.$ = new yy.ConstantNode($$[$0]);
break;
case 8:this.$ = new yy.BlockNode($$[$0-2], $$[$0], $$[$0-1], $$[$0-1].inverse);
break;
case 9:this.$ = new yy.DataNode($$[$0-1]);
break;
case 10:this.$ = new yy.InlineNode($$[$0-2], $$[$0-1]);
break;
case 11:this.$ = new yy.CommandNode($$[$0-2], $$[$0-1]);
break;
case 12:this.$ = $$[$0];
break;
case 13:this.$ = $$[$0];
break;
case 14:this.$ = $$[$0-1];
break;
case 15:this.$ = {command:'elseif', params: $$[$0-2], statements: $$[$0]};
break;
case 16:this.$ = $$[$0];
break;
case 17:this.$ = new yy.PropertyNode($$[$0-2], $$[$0]);
break;
case 18:this.$ = $$[$0];
break;
case 19:this.$ = $$[$0];
break;
case 20:this.$ = new yy.ConstantNode($$[$0]);
break;
case 21:this.$ = new yy.ConstantNode($$[$0]);
break;
case 22:this.$ = new yy.ConstantNode($$[$0]);
break;
case 23:this.$ = new yy.ConstantNode($$[$0]);
break;
case 24:this.$ = new yy.ChainableNode($$[$0-1], $$[$0]);
break;
case 25:this.$ = new yy.ChainableNode($$[$0-1], $$[$0]);
break;
case 26:this.$ = new yy.PhpFunctionNode($$[$0-3], $$[$0-1]);
break;
case 27:this.$ = new yy.VariableNode($$[$0]);
break;
case 28:this.$ = new yy.ModifierNode($$[$0-1], $$[$0]);
break;
case 29:this.$ = [$$[$0]];
break;
case 30:this.$ = $$[$0-2].concat($$[$0]);
break;
case 31:this.$ = $$[$0];
break;
case 32:this.$ = $$[$0-2].concat($$[$0]);
break;
case 33:this.$ = [$$[$0]];
break;
case 34:this.$ = [];
break;
case 35:$$[$0-1].push($$[$0]);
break;
case 38:this.$ = [];
break;
case 39:$$[$0-1].push($$[$0]);
break;
case 40:this.$ = [];
break;
case 41:$$[$0-1].push($$[$0]);
break;
case 42:this.$ = [];
break;
case 43:$$[$0-1].push($$[$0]);
break;
case 48:this.$ = [];
break;
case 49:$$[$0-1].push($$[$0]);
break;
case 50:this.$ = [];
break;
case 51:$$[$0-1].push($$[$0]);
break;
case 52:this.$ = [];
break;
case 53:$$[$0-1].push($$[$0]);
break;
}
},
table: [{3:1,4:2,5:[1,3],9:4,10:[1,5],11:6,13:[1,7]},{1:[3]},{5:[1,8],9:9,10:[1,5],11:6,13:[1,7]},{1:[2,2]},{5:[2,5],10:[2,5],13:[2,5],23:[2,5],25:[2,5],29:[2,5]},{5:[2,7],10:[2,7],13:[2,7],23:[2,7],25:[2,7],29:[2,7]},{4:11,6:10,9:4,10:[1,5],11:6,13:[1,7],23:[2,4]},{14:12,16:[1,13],18:[1,14],37:15,39:16,44:[1,17]},{1:[2,1]},{5:[2,6],10:[2,6],13:[2,6],23:[2,6],25:[2,6],29:[2,6]},{12:18,23:[1,19]},{7:20,9:9,10:[1,5],11:6,13:[1,7],23:[2,34],25:[2,34],29:[2,34]},{15:[1,21]},{15:[2,38],16:[2,38],17:22,41:[1,23]},{15:[2,40],16:[2,40],19:24,33:[2,40],34:[2,40],35:[2,40],36:[2,40],44:[2,40]},{15:[2,48],16:[2,48],33:[2,48],34:[2,48],35:[2,48],36:[2,48],38:25,43:[2,48],44:[2,48],47:[2,48]},{15:[2,50],16:[2,50],33:[2,50],34:[2,50],35:[2,50],36:[2,50],40:26,43:[2,50],44:[2,50],47:[2,50]},{16:[1,29],45:27,51:28},{5:[2,8],10:[2,8],13:[2,8],23:[2,8],25:[2,8],29:[2,8]},{18:[1,30]},{8:31,23:[2,36],24:32,25:[1,34],28:33,29:[1,35]},{5:[2,9],10:[2,9],13:[2,9],23:[2,9],25:[2,9],29:[2,9]},{15:[1,36],16:[1,38],22:37},{16:[2,52],33:[2,52],34:[2,52],35:[2,52],36:[2,52],42:39,43:[2,52],44:[2,52]},{14:45,15:[1,40],16:[1,46],20:41,21:42,22:43,32:44,33:[1,47],34:[1,48],35:[1,49],36:[1,50],37:15,39:16,44:[1,17]},{15:[2,24],16:[2,24],33:[2,24],34:[2,24],35:[2,24],36:[2,24],43:[2,24],44:[2,24],46:51,47:[1,52]},{15:[2,25],16:[2,25],33:[2,25],34:[2,25],35:[2,25],36:[2,25],43:[2,25],44:[2,25],46:53,47:[1,52]},{15:[2,27],16:[2,27],33:[2,27],34:[2,27],35:[2,27],36:[2,27],43:[2,27],44:[2,27],47:[2,27]},{15:[2,31],16:[2,31],33:[2,31],34:[2,31],35:[2,31],36:[2,31],43:[2,31],44:[2,31],47:[2,31],52:[1,54]},{15:[2,33],16:[2,33],33:[2,33],34:[2,33],35:[2,33],36:[2,33],43:[2,33],44:[2,33],47:[2,33],52:[2,33]},{15:[1,55]},{23:[2,3]},{23:[2,35],25:[2,35],29:[2,35]},{23:[2,37]},{15:[2,42],16:[2,42],26:56,33:[2,42],34:[2,42],35:[2,42],36:[2,42],44:[2,42]},{4:58,9:4,10:[1,5],11:6,13:[1,7],23:[2,46],30:57},{5:[2,10],10:[2,10],13:[2,10],23:[2,10],25:[2,10],29:[2,10]},{15:[2,39],16:[2,39]},{31:[1,59]},{14:45,16:[1,62],21:61,32:44,33:[1,47],34:[1,48],35:[1,49],36:[1,50],37:15,39:16,43:[1,60],44:[1,17]},{10:[2,11],13:[2,11],23:[2,11]},{15:[2,41],16:[2,41],33:[2,41],34:[2,41],35:[2,41],36:[2,41],44:[2,41]},{15:[2,12],16:[2,12],33:[2,12],34:[2,12],35:[2,12],36:[2,12],44:[2,12]},{15:[2,13],16:[2,13],33:[2,13],34:[2,13],35:[2,13],36:[2,13],44:[2,13]},{15:[2,18],16:[2,18],33:[2,18],34:[2,18],35:[2,18],36:[2,18],43:[2,18],44:[2,18]},{15:[2,19],16:[2,19],33:[2,19],34:[2,19],35:[2,19],36:[2,19],43:[2,19],44:[2,19]},{31:[1,59],41:[1,23]},{15:[2,20],16:[2,20],33:[2,20],34:[2,20],35:[2,20],36:[2,20],43:[2,20],44:[2,20],47:[2,20],50:[2,20]},{15:[2,21],16:[2,21],33:[2,21],34:[2,21],35:[2,21],36:[2,21],43:[2,21],44:[2,21],47:[2,21],50:[2,21]},{15:[2,22],16:[2,22],33:[2,22],34:[2,22],35:[2,22],36:[2,22],43:[2,22],44:[2,22],47:[2,22],50:[2,22]},{15:[2,23],16:[2,23],33:[2,23],34:[2,23],35:[2,23],36:[2,23],43:[2,23],44:[2,23],47:[2,23],50:[2,23]},{15:[2,49],16:[2,49],33:[2,49],34:[2,49],35:[2,49],36:[2,49],43:[2,49],44:[2,49],47:[2,49]},{16:[1,63]},{15:[2,51],16:[2,51],33:[2,51],34:[2,51],35:[2,51],36:[2,51],43:[2,51],44:[2,51],47:[2,51]},{16:[1,64]},{5:[2,14],10:[2,14],13:[2,14],23:[2,14],25:[2,14],29:[2,14]},{14:45,15:[1,65],16:[1,46],20:66,21:42,22:43,32:44,33:[1,47],34:[1,48],35:[1,49],36:[1,50],37:15,39:16,44:[1,17]},{23:[2,16]},{9:9,10:[1,5],11:6,13:[1,7],23:[2,47]},{14:45,16:[1,62],21:67,32:44,33:[1,47],34:[1,48],35:[1,49],36:[1,50],37:15,39:16,44:[1,17]},{15:[2,26],16:[2,26],33:[2,26],34:[2,26],35:[2,26],36:[2,26],43:[2,26],44:[2,26],47:[2,26]},{16:[2,53],33:[2,53],34:[2,53],35:[2,53],36:[2,53],43:[2,53],44:[2,53]},{41:[1,23]},{15:[2,54],16:[2,54],33:[2,54],34:[2,54],35:[2,54],36:[2,54],43:[2,54],44:[2,54],47:[2,54],48:68,49:69,50:[1,70]},{15:[2,32],16:[2,32],33:[2,32],34:[2,32],35:[2,32],36:[2,32],43:[2,32],44:[2,32],47:[2,32],52:[2,32]},{4:72,9:4,10:[1,5],11:6,13:[1,7],23:[2,44],25:[2,44],27:71,29:[2,44]},{15:[2,43],16:[2,43],33:[2,43],34:[2,43],35:[2,43],36:[2,43],44:[2,43]},{15:[2,17],16:[2,17],33:[2,17],34:[2,17],35:[2,17],36:[2,17],44:[2,17]},{15:[2,28],16:[2,28],33:[2,28],34:[2,28],35:[2,28],36:[2,28],43:[2,28],44:[2,28],47:[2,28]},{15:[2,55],16:[2,55],33:[2,55],34:[2,55],35:[2,55],36:[2,55],43:[2,55],44:[2,55],47:[2,55],50:[1,73]},{32:74,33:[1,47],34:[1,48],35:[1,49],36:[1,50]},{23:[2,15],25:[2,15],29:[2,15]},{9:9,10:[1,5],11:6,13:[1,7],23:[2,45],25:[2,45],29:[2,45]},{32:75,33:[1,47],34:[1,48],35:[1,49],36:[1,50]},{15:[2,29],16:[2,29],33:[2,29],34:[2,29],35:[2,29],36:[2,29],43:[2,29],44:[2,29],47:[2,29],50:[2,29]},{15:[2,30],16:[2,30],33:[2,30],34:[2,30],35:[2,30],36:[2,30],43:[2,30],44:[2,30],47:[2,30],50:[2,30]}],
defaultActions: {3:[2,2],8:[2,1],31:[2,3],33:[2,37],57:[2,16]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined') {
        this.lexer.yylloc = {};
    }
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === 'function') {
        this.parseError = this.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || EOF;
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + this.lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: this.lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: this.lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                this.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.2.1 */
var lexer = (function(){
var lexer = {

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input) {
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len - 1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:
  this.begin("s");
  if (yy_.yytext) {
    console.log("CONTENT:%s", yy_.yytext);
    return "CONTENT";
  }

break;
case 1:
  console.log("CONTENT:%s", yy_.yytext);
  return "CONTENT";

break;
case 2:
  yy_.yytext = "elseif";
  this.begin("cmd");
  return "ELSEIF";

break;
case 3:
  console.log("ELSE");
  yy_.yytext = "else";
  return "ELSE";

break;
case 4:
  console.log('OPEN_BLOCK_END');
  this.begin("cmd");
  return "OPEN_BLOCK_END";

break;
case 5:
  console.log("S|OPEN");
  this.begin("cmd");
  return "OPEN";

break;
case 6:
  console.log("CMD|COMMAND|%s", yy_.yytext);
  return "CMD";

break;
case 7:
  console.log("CMD|OPERATOR|%s", yy_.yytext);
  return "OPERATOR";

break;
case 8:
  console.log("CMD|ID|%s", yy_.yytext);
  return "ID";

break;
case 9:
  console.log("CMD|STRING|%s", yy_.yytext);
  return "STRING";

break;
case 10:
  console.log("CMD|STRING|%s", yy_.yytext);
  return "STRING";

break;
case 11:
  console.log("CMD|BOOLEAN:%s", yy_.yytext);
  return "BOOLEAN";

break;
case 12:
  console.log("CMD|DATA");
  return "DATA";

break;
case 13:
  console.log("CMD|SEP");
  return "SEP";

break;
case 14:
  console.log("CMD|OPERATOR");
  return "EQUAL";

break;
case 15:
  return "CURSOR";

break;
case 16:
  console.log("CMD|MODIFIER");
  return "MODIFIER";

break;
case 17:
  return "MODIFIER_PARAM";

break;
case 18:
  console.log("CMD|FUNCTION_OPEN");
  return "FUNCTION_OPEN";

break;
case 19:
  console.log("CMD|FUNCTION_CLOSE");
  return "FUNCTION_CLOSE";

break;
case 20:
  console.log("CMD|INTEGER:%s", yy_.yytext);
  return "INTEGER";

break;
case 21:
  // eat

break;
case 22:
  this.popState();
  this.popState();
  console.log("CMD|CLOSE");
  return "CLOSE";

break;
case 23:
  // eat

break;
case 24:
  return "EOF";

break;
}
},
rules: [/^(?:[^\x00]*?(?=(\{)))/,/^(?:[^\x00]+)/,/^(?:(\{)\s*(elseif(?=([=}\s\/.)(:\|]))))/,/^(?:(\{)\s*(else(?=([=}\s\/.)(:\|])))\s*(\}))/,/^(?:(\{)\/)/,/^(?:(\{))/,/^(?:(if|foreach|function|block(?=([=}\s\/.)(:\|]))))/,/^(?:(=>|===|==|as(?=([=}\s\/.)(:\|]))))/,/^(?:([_a-zA-Z][_a-zA-Z0-9]*(?=([=}\s\/.)(:\|]))))/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:(false|true(?=([=}\s\/.)(:\|]))))/,/^(?:\$)/,/^(?:\.)/,/^(?:=)/,/^(?:@)/,/^(?:\|)/,/^(?::)/,/^(?:\()/,/^(?:\))/,/^(?:(-?[0-9]+(?=([=}\s\/.)(:\|]))))/,/^(?:\s+)/,/^(?:(\}))/,/^(?:[\s])/,/^(?:$)/],
conditions: {"s":{"rules":[2,3,4,5,23,24],"inclusive":false},"cmd":{"rules":[6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22],"inclusive":false},"id":{"rules":[],"inclusive":false},"INITIAL":{"rules":[0,1,24],"inclusive":true}}
};
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();

module.exports=parser;
/* jshint ignore:end */